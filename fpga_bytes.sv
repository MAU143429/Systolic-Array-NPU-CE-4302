`default_nettype none
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module fpga_bytes(

    //////////// CLOCK //////////
    input                           CLOCK_125_p,
    input                           CLOCK_50_B5B,
    input                           CLOCK_50_B6A,
    input                           CLOCK_50_B7A,
    input                           CLOCK_50_B8A,

    //////////// LED //////////
    output             [7:0]        LEDG,
    output             [9:0]        LEDR,

    //////////// KEY //////////
    input                           CPU_RESET_n,
    input              [3:0]        KEY,

    //////////// SW //////////
    input              [9:0]        SW,

    //////////// SEG7 //////////
    output             [6:0]        HEX0,
    output             [6:0]        HEX1,
    output             [6:0]        HEX2,
    output             [6:0]        HEX3,

    //////////// Uart to USB //////////
    input                           UART_RX,
    output                          UART_TX,

    //////////// SRAM //////////
    output            [17:0]        SRAM_A,
    output                          SRAM_CE_n,
    inout             [15:0]        SRAM_D,
    output                          SRAM_LB_n,
    output                          SRAM_OE_n,
    output                          SRAM_UB_n,
    output                          SRAM_WE_n
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire clk;
wire reset;
wire configure;
wire up;
wire down;
wire ready;
wire [2:0] lights_1;
wire [2:0] lights_2;
wire [1:0] state;
wire [7:0] counter;
wire [15:0] bcd_out;
wire [15:0] bin_in;

wire tdi;
wire tdo;              
wire ir_in;
// wire ir_out;
// wire virtual_state_cdr;
wire virtual_state_sdr;
// wire virtual_state_e1d;
// wire virtual_state_pdr;
// wire virtual_state_e2d;
wire virtual_state_udr;
// wire virtual_state_cir;
// wire virtual_state_uir;
wire tck;              

wire [7:0] jtag_data;

//=======================================================
//  Structural coding
//=======================================================
assign  bin_in = ({{8{1'b0}}, jtag_data});
assign  clk = CLOCK_50_B5B;
assign  reset     =  CPU_RESET_n;
assign  configure = ~KEY[0];
assign  up        = ~KEY[1];
assign  down      = ~KEY[2];
assign  ready     = ~KEY[3];

assign  {LEDG[2], LEDG[1], LEDG[0]} = lights_1;
assign  {LEDG[5], LEDG[4], LEDG[3]} = lights_2;
assign  {LEDG[7], LEDG[6]} = state;
assign  {LEDR[7], LEDR[6], LEDR[5], LEDR[4], LEDR[3], LEDR[2], LEDR[1], LEDR[0]} = jtag_data;
traffic_lights U_traffic_lights(
                                .clk(clk), 
                                .reset(reset), 
                                .configure(configure), 
                                .up(up), 
                                .down(down), 
                                .ready(ready), 
                                .lights_1(lights_1), 
                                .lights_2(lights_2), 
                                .state(state),
                                .counter(counter)
                                );
                                
bin2bcd_decoder u_bin2bcd_decoder(
                                  .clk(clk), 
                                  .reset_n(reset), 
                                  .decode('1), 
                                  .bin_in(bin_in), 
                                  .bcd_out(bcd_out)
                                  );
                                  
vjtag u_vjtag (
                    .tdi                (tdi),  // jtag.tdi
                    .tdo                (tdo),  //.tdo
                    .ir_in              (ir_in),  //.ir_in
                    .ir_out             (),  //.ir_out
                    .virtual_state_cdr  (),  //.virtual_state_cdr
                    .virtual_state_sdr  (virtual_state_sdr),  //.virtual_state_sdr
                    .virtual_state_e1dr (),  //.virtual_state_e1dr
                    .virtual_state_pdr  (),  //.virtual_state_pdr
                    .virtual_state_e2dr (),  //.virtual_state_e2dr
                    .virtual_state_udr  (virtual_state_udr),  //.virtual_state_udr
                    .virtual_state_cir  (),  //.virtual_state_cir
                    .virtual_state_uir  (),  //.virtual_state_uir
                    .tck                (tck)   //  tck.clk
                    );

vjtag_interface u_vjtag_interface (
                        .tck(tck),
                        .tdi(tdi),
                        .aclr(reset),
                        .ir_in(ir_in),
                        .v_sdr(virtual_state_sdr),
                        .udr(virtual_state_udr),
                        .data(jtag_data),
                        .tdo(tdo)
                       );
bcd2seven_seg u_bcd2seven_seg_0(bcd_out[3:0], HEX0);

bcd2seven_seg u_bcd2seven_seg_1(bcd_out[7:4], HEX1);

bcd2seven_seg u_bcd2seven_seg_2(bcd_out[11:8], HEX2);

bcd2seven_seg u_bcd2seven_seg_3(bcd_out[15:12], HEX3);

endmodule
